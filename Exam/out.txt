#####################################
This project implements the inverse iteration algorithm to find eigenvalues and eigenvectors
Below testing starts out with analytically solved systems, then comparing them to the results of the algorithm, also checking what happens when we use large numbers for guesses
#####################################
Matrix A
         1          2          3 
         1          2          1 
         3          2          1 
#####################################
The analytical solutions for this matrix are eigenvalue = 5.23606, and the eigenvector = 0.64676, 0.40045, 0.64793
Guess for eigenvalue: 5
Guess for eigen vector:         1          1          1 
Eigenvalue from inverse iteration: 5.23606797749979
Eigenvector from inverse iteration:      0.648        0.4      0.648 
Number of iterations to find solution: 4
#####################################
Test for same matrix this time not providing an initial guess for the eigenvector instead letting implementation generate a random one
Guess for eigenvalue: 5
Guess for eigen vector:     0.935      0.137      0.185 
Eigenvalue from inverse iteration: 5.23606797749979
Eigenvector from inverse iteration:     -0.648       -0.4     -0.648 
Number of iterations to find solution: 4
#####################################
Test for same matrix this time finding a guess for the eigenvalue that makes the algorithm fail
Guess for eigenvalue: 1E+162
Guess for eigen vector:         1          1          1 
Eigenvalue from inverse iteration: NaN
Eigenvector from inverse iteration:  -Infinity  -Infinity  -Infinity 
Number of iterations to find solution: 1
#####################################
Test for same matrix this time finding a guess for the eigenvector that makes the algorithm fail
Guess for eigenvalue: 5
Guess for eigen vector:    1e+160     1e+160     1e+160 
Eigenvalue from inverse iteration: NaN
Eigenvector from inverse iteration:          0          0          0 
Number of iterations to find solution: 1
#####################################
Test for same matrix this time making an eigenvector and eigenvalue guess that is far off
Guess for eigenvalue: 1E+162
Guess for eigen vector:    1e+160     1e+160     1e+160 
Eigenvalue from inverse iteration: 5.23606797749979
Eigenvector from inverse iteration:     -0.648       -0.4     -0.648 
Number of iterations to find solution: 5
When very large numbers are used, however if both the guess for eigenvector and eigenvalue or large then there it still works suggesting a proportionality
#####################################
New matrix, with real and complex solutions
I will not dive into how it handles big numbers again. Instead here check that it finds the correct values first, then check how it handles the real part of imaginary numbers
#####################################
Matrix B
         1          5          2          1 
         3          2          1          6 
         9          8          5          4 
         1          6          5          6 
Guess for eigenvalue: 5
Guess for eigen vector:         1          1          1          1 
Eigenvalue from inverse iteration: 15.9020351786784
Eigenvector from inverse iteration:      0.251      0.356      0.683      0.586 
Number of iterations to find solution: 7
Guess for eigenvalue: 1.22222
Guess for eigen vector:     -0.74       0.27      -1.13          1 
Eigenvalue from inverse iteration: 1.22220167424402
Eigenvector from inverse iteration:      0.586      0.353    -0.0957     -0.723 
Number of iterations to find solution: 9041863
Here i guessed the real part of the complex solutions, interestingly it finds the correct solutions for the real part, we can however still see from the number of iterations compared to the solutions from matrix A with only real solutions that the computation time increases significantly
#####################################
New matrix, with complex solution containing no real part
Here i test for how the algorithm handles no real solutions
#####################################
Matrix for no real solution
         0         -1 
         1          0 
Guess for eigenvalue: 1
Guess for eigen vector:         0          0 
Eigenvalue from inverse iteration: NaN
Eigenvector from inverse iteration:        NaN        NaN 
Number of iterations to find solution: 1
Algorithm was never supposed to handle complex solutions, the complex solutions contain no real part so it makes sense that it would fail
#####################################
5 new matrices, 10x10, 15x15, 20x20, 25x25, 30x30
Here i test how the program handles large matrices
#####################################
10x10 matrix
Guess for eigenvalue: 1
Guess for eigen vector:     0.551      0.576        0.8       0.75       0.31      0.271     0.0888      0.528      0.241      0.565 
Eigenvalue from inverse iteration: -2.46892017393535
Eigenvector from inverse iteration:     -0.241      0.187      -0.24      0.319      0.322     -0.413     -0.487      0.403     -0.272     0.0268 
Number of iterations to find solution: 3945161
15x15 matrix
Guess for eigenvalue: 1
Guess for eigen vector:     0.451      0.701      0.642      0.162       0.58      0.583      0.653      0.961     0.0879      0.863      0.592      0.417      0.324      0.217      0.538 
Eigenvalue from inverse iteration: 2.7369430627129
Eigenvector from inverse iteration:     -0.359    0.00113      0.437     -0.173     -0.119     -0.287     0.0656     -0.346       0.17      0.195      0.486     0.0667     -0.332     0.0733     -0.078 
Number of iterations to find solution: 5
The algorithm still works with large matrices in a few steps, when testing the amount of iterations where it encounters complex numbers are still high but vary in amount of iterations
